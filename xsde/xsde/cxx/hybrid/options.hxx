// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

#ifndef CXX_HYBRID_OPTIONS_HXX
#define CXX_HYBRID_OPTIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <cstddef>

#include <types.hxx>

#include <cxx/options.hxx>

namespace CXX
{
  namespace Hybrid
  {
    class options: public ::CXX::options
    {
      public:
      options ();

      options (int& argc,
               char** argv,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (int start,
               int& argc,
               char** argv,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (int& argc,
               char** argv,
               int& end,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (int start,
               int& argc,
               char** argv,
               int& end,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (::cli::scanner&,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      // Option accessors and modifiers.
      //
      const bool&
      generate_parser () const;

      bool&
      generate_parser ();

      void
      generate_parser (const bool&);

      const bool&
      generate_serializer () const;

      bool&
      generate_serializer ();

      void
      generate_serializer (const bool&);

      const bool&
      generate_aggregate () const;

      bool&
      generate_aggregate ();

      void
      generate_aggregate (const bool&);

      const bool&
      suppress_validation () const;

      bool&
      suppress_validation ();

      void
      suppress_validation (const bool&);

      const bool&
      suppress_parser_val () const;

      bool&
      suppress_parser_val ();

      void
      suppress_parser_val (const bool&);

      const bool&
      suppress_serializer_val () const;

      bool&
      suppress_serializer_val ();

      void
      suppress_serializer_val (const bool&);

      const bool&
      omit_default_attributes () const;

      bool&
      omit_default_attributes ();

      void
      omit_default_attributes (const bool&);

      const bool&
      suppress_enum () const;

      bool&
      suppress_enum ();

      void
      suppress_enum (const bool&);

      const bool&
      generate_clone () const;

      bool&
      generate_clone ();

      void
      generate_clone (const bool&);

      const bool&
      generate_detach () const;

      bool&
      generate_detach ();

      void
      generate_detach (const bool&);

      const NarrowStrings&
      generate_insertion () const;

      NarrowStrings&
      generate_insertion ();

      void
      generate_insertion (const NarrowStrings&);

      const NarrowStrings&
      generate_extraction () const;

      NarrowStrings&
      generate_extraction ();

      void
      generate_extraction (const NarrowStrings&);

      const bool&
      generate_forward () const;

      bool&
      generate_forward ();

      void
      generate_forward (const bool&);

      const bool&
      generate_polymorphic () const;

      bool&
      generate_polymorphic ();

      void
      generate_polymorphic (const bool&);

      const bool&
      runtime_polymorphic () const;

      bool&
      runtime_polymorphic ();

      void
      runtime_polymorphic (const bool&);

      const NarrowStrings&
      polymorphic_type () const;

      NarrowStrings&
      polymorphic_type ();

      void
      polymorphic_type (const NarrowStrings&);

      const bool&
      generate_typeinfo () const;

      bool&
      generate_typeinfo ();

      void
      generate_typeinfo (const bool&);

      const NarrowStrings&
      polymorphic_schema () const;

      NarrowStrings&
      polymorphic_schema ();

      void
      polymorphic_schema (const NarrowStrings&);

      const bool&
      reuse_style_mixin () const;

      bool&
      reuse_style_mixin ();

      void
      reuse_style_mixin (const bool&);

      const NarrowStrings&
      custom_data () const;

      NarrowStrings&
      custom_data ();

      void
      custom_data (const NarrowStrings&);

      const NarrowStrings&
      custom_type () const;

      NarrowStrings&
      custom_type ();

      void
      custom_type (const NarrowStrings&);

      const NarrowStrings&
      custom_parser () const;

      NarrowStrings&
      custom_parser ();

      void
      custom_parser (const NarrowStrings&);

      const NarrowStrings&
      custom_serializer () const;

      NarrowStrings&
      custom_serializer ();

      void
      custom_serializer (const NarrowStrings&);

      const bool&
      root_element_first () const;

      bool&
      root_element_first ();

      void
      root_element_first (const bool&);

      const bool&
      root_element_last () const;

      bool&
      root_element_last ();

      void
      root_element_last (const bool&);

      const bool&
      root_element_all () const;

      bool&
      root_element_all ();

      void
      root_element_all (const bool&);

      const bool&
      root_element_none () const;

      bool&
      root_element_none ();

      void
      root_element_none (const bool&);

      const NarrowStrings&
      root_element () const;

      NarrowStrings&
      root_element ();

      void
      root_element (const NarrowStrings&);

      const NarrowStrings&
      root_type () const;

      NarrowStrings&
      root_type ();

      void
      root_type (const NarrowStrings&);

      const NarrowString&
      pskel_type_suffix () const;

      NarrowString&
      pskel_type_suffix ();

      void
      pskel_type_suffix (const NarrowString&);

      const NarrowString&
      sskel_type_suffix () const;

      NarrowString&
      sskel_type_suffix ();

      void
      sskel_type_suffix (const NarrowString&);

      const NarrowString&
      pskel_file_suffix () const;

      NarrowString&
      pskel_file_suffix ();

      void
      pskel_file_suffix (const NarrowString&);

      const NarrowString&
      sskel_file_suffix () const;

      NarrowString&
      sskel_file_suffix ();

      void
      sskel_file_suffix (const NarrowString&);

      const NarrowString&
      pimpl_type_suffix () const;

      NarrowString&
      pimpl_type_suffix ();

      void
      pimpl_type_suffix (const NarrowString&);

      const NarrowString&
      simpl_type_suffix () const;

      NarrowString&
      simpl_type_suffix ();

      void
      simpl_type_suffix (const NarrowString&);

      const NarrowString&
      pimpl_file_suffix () const;

      NarrowString&
      pimpl_file_suffix ();

      void
      pimpl_file_suffix (const NarrowString&);

      const NarrowString&
      simpl_file_suffix () const;

      NarrowString&
      simpl_file_suffix ();

      void
      simpl_file_suffix (const NarrowString&);

      const NarrowString&
      paggr_type_suffix () const;

      NarrowString&
      paggr_type_suffix ();

      void
      paggr_type_suffix (const NarrowString&);

      const NarrowString&
      saggr_type_suffix () const;

      NarrowString&
      saggr_type_suffix ();

      void
      saggr_type_suffix (const NarrowString&);

      const NarrowStrings&
      hxx_regex () const;

      NarrowStrings&
      hxx_regex ();

      void
      hxx_regex (const NarrowStrings&);

      const NarrowStrings&
      ixx_regex () const;

      NarrowStrings&
      ixx_regex ();

      void
      ixx_regex (const NarrowStrings&);

      const NarrowStrings&
      cxx_regex () const;

      NarrowStrings&
      cxx_regex ();

      void
      cxx_regex (const NarrowStrings&);

      const NarrowStrings&
      hxx_prologue_file () const;

      NarrowStrings&
      hxx_prologue_file ();

      void
      hxx_prologue_file (const NarrowStrings&);

      const NarrowStrings&
      ixx_prologue_file () const;

      NarrowStrings&
      ixx_prologue_file ();

      void
      ixx_prologue_file (const NarrowStrings&);

      const NarrowStrings&
      cxx_prologue_file () const;

      NarrowStrings&
      cxx_prologue_file ();

      void
      cxx_prologue_file (const NarrowStrings&);

      const NarrowStrings&
      prologue_file () const;

      NarrowStrings&
      prologue_file ();

      void
      prologue_file (const NarrowStrings&);

      const NarrowStrings&
      hxx_epilogue_file () const;

      NarrowStrings&
      hxx_epilogue_file ();

      void
      hxx_epilogue_file (const NarrowStrings&);

      const NarrowStrings&
      ixx_epilogue_file () const;

      NarrowStrings&
      ixx_epilogue_file ();

      void
      ixx_epilogue_file (const NarrowStrings&);

      const NarrowStrings&
      cxx_epilogue_file () const;

      NarrowStrings&
      cxx_epilogue_file ();

      void
      cxx_epilogue_file (const NarrowStrings&);

      const NarrowStrings&
      epilogue_file () const;

      NarrowStrings&
      epilogue_file ();

      void
      epilogue_file (const NarrowStrings&);

      // Print usage information.
      //
      static ::cli::usage_para
      print_usage (::std::wostream&,
                   ::cli::usage_para = ::cli::usage_para::none);

      // Implementation details.
      //
      protected:
      bool
      _parse (const char*, ::cli::scanner&);

      private:
      bool
      _parse (::cli::scanner&,
              ::cli::unknown_mode option,
              ::cli::unknown_mode argument);

      public:
      bool generate_parser_;
      bool generate_serializer_;
      bool generate_aggregate_;
      bool suppress_validation_;
      bool suppress_parser_val_;
      bool suppress_serializer_val_;
      bool omit_default_attributes_;
      bool suppress_enum_;
      bool generate_clone_;
      bool generate_detach_;
      NarrowStrings generate_insertion_;
      NarrowStrings generate_extraction_;
      bool generate_forward_;
      bool generate_polymorphic_;
      bool runtime_polymorphic_;
      NarrowStrings polymorphic_type_;
      bool generate_typeinfo_;
      NarrowStrings polymorphic_schema_;
      bool reuse_style_mixin_;
      NarrowStrings custom_data_;
      NarrowStrings custom_type_;
      NarrowStrings custom_parser_;
      NarrowStrings custom_serializer_;
      bool root_element_first_;
      bool root_element_last_;
      bool root_element_all_;
      bool root_element_none_;
      NarrowStrings root_element_;
      NarrowStrings root_type_;
      NarrowString pskel_type_suffix_;
      NarrowString sskel_type_suffix_;
      NarrowString pskel_file_suffix_;
      NarrowString sskel_file_suffix_;
      NarrowString pimpl_type_suffix_;
      NarrowString simpl_type_suffix_;
      NarrowString pimpl_file_suffix_;
      NarrowString simpl_file_suffix_;
      NarrowString paggr_type_suffix_;
      NarrowString saggr_type_suffix_;
      NarrowStrings hxx_regex_;
      NarrowStrings ixx_regex_;
      NarrowStrings cxx_regex_;
      NarrowStrings hxx_prologue_file_;
      NarrowStrings ixx_prologue_file_;
      NarrowStrings cxx_prologue_file_;
      NarrowStrings prologue_file_;
      NarrowStrings hxx_epilogue_file_;
      NarrowStrings ixx_epilogue_file_;
      NarrowStrings cxx_epilogue_file_;
      NarrowStrings epilogue_file_;
    };
  }
}

#include <cxx/hybrid/options.ixx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HYBRID_OPTIONS_HXX
