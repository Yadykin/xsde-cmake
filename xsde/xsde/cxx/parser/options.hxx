// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

#ifndef CXX_PARSER_OPTIONS_HXX
#define CXX_PARSER_OPTIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <cstddef>

#include <types.hxx>

#include <cxx/options.hxx>

namespace CXX
{
  namespace Parser
  {
    class options: public ::CXX::options
    {
      public:
      options ();

      options (int& argc,
               char** argv,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (int start,
               int& argc,
               char** argv,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (int& argc,
               char** argv,
               int& end,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (int start,
               int& argc,
               char** argv,
               int& end,
               bool erase = false,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      options (::cli::scanner&,
               ::cli::unknown_mode option = ::cli::unknown_mode::fail,
               ::cli::unknown_mode argument = ::cli::unknown_mode::stop);

      // Option accessors and modifiers.
      //
      const NarrowStrings&
      type_map () const;

      NarrowStrings&
      type_map ();

      void
      type_map (const NarrowStrings&);

      const bool&
      suppress_validation () const;

      bool&
      suppress_validation ();

      void
      suppress_validation (const bool&);

      const bool&
      reuse_style_mixin () const;

      bool&
      reuse_style_mixin ();

      void
      reuse_style_mixin (const bool&);

      const bool&
      reuse_style_none () const;

      bool&
      reuse_style_none ();

      void
      reuse_style_none (const bool&);

      const bool&
      generate_polymorphic () const;

      bool&
      generate_polymorphic ();

      void
      generate_polymorphic (const bool&);

      const bool&
      runtime_polymorphic () const;

      bool&
      runtime_polymorphic ();

      void
      runtime_polymorphic (const bool&);

      const bool&
      generate_noop_impl () const;

      bool&
      generate_noop_impl ();

      void
      generate_noop_impl (const bool&);

      const bool&
      generate_print_impl () const;

      bool&
      generate_print_impl ();

      void
      generate_print_impl (const bool&);

      const bool&
      generate_test_driver () const;

      bool&
      generate_test_driver ();

      void
      generate_test_driver (const bool&);

      const bool&
      force_overwrite () const;

      bool&
      force_overwrite ();

      void
      force_overwrite (const bool&);

      const bool&
      root_element_first () const;

      bool&
      root_element_first ();

      void
      root_element_first (const bool&);

      const bool&
      root_element_last () const;

      bool&
      root_element_last ();

      void
      root_element_last (const bool&);

      const NarrowString&
      root_element () const;

      NarrowString&
      root_element ();

      void
      root_element (const NarrowString&);

      const NarrowString&
      skel_type_suffix () const;

      NarrowString&
      skel_type_suffix ();

      void
      skel_type_suffix (const NarrowString&);

      const NarrowString&
      skel_file_suffix () const;

      NarrowString&
      skel_file_suffix ();

      void
      skel_file_suffix (const NarrowString&);

      const NarrowString&
      impl_type_suffix () const;

      NarrowString&
      impl_type_suffix ();

      void
      impl_type_suffix (const NarrowString&);

      const NarrowString&
      impl_file_suffix () const;

      NarrowString&
      impl_file_suffix ();

      void
      impl_file_suffix (const NarrowString&);

      // Print usage information.
      //
      static ::cli::usage_para
      print_usage (::std::wostream&,
                   ::cli::usage_para = ::cli::usage_para::none);

      // Implementation details.
      //
      protected:
      bool
      _parse (const char*, ::cli::scanner&);

      private:
      bool
      _parse (::cli::scanner&,
              ::cli::unknown_mode option,
              ::cli::unknown_mode argument);

      public:
      NarrowStrings type_map_;
      bool suppress_validation_;
      bool reuse_style_mixin_;
      bool reuse_style_none_;
      bool generate_polymorphic_;
      bool runtime_polymorphic_;
      bool generate_noop_impl_;
      bool generate_print_impl_;
      bool generate_test_driver_;
      bool force_overwrite_;
      bool root_element_first_;
      bool root_element_last_;
      NarrowString root_element_;
      NarrowString skel_type_suffix_;
      NarrowString skel_file_suffix_;
      NarrowString impl_type_suffix_;
      NarrowString impl_file_suffix_;
    };
  }
}

#include <cxx/parser/options.ixx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_PARSER_OPTIONS_HXX
